import { Aegis } from "./aegis";
import { Version as ProtocolVersion } from "../protocol";
import { expect, test } from "vitest";
import { Algorithm } from "../crypt";
import { Version as CipherVersion } from "../crypt/cipher/cipher";

test("aegis1", () => {
  // Test case 1
  const key = new Uint8Array(Buffer.from("01234567890123456789012345678901"));
  const data = new Uint8Array(Buffer.from("MESSAGE_1"));

  const aegis = Aegis.dealShares(ProtocolVersion.V1, CipherVersion.V1, Algorithm.NoCryptAlgo, 3, 3, data, key);

  expect(aegis.payloads.length).toEqual(3);
  expect(aegis.payloads[0]).toEqual(
    new Uint8Array([
      123, 34, 112, 114, 111, 116, 111, 99, 111, 108, 95, 118, 101, 114, 115, 105, 111, 110, 34, 58, 34, 86, 49, 34, 44,
      34, 112, 97, 99, 107, 101, 116, 34, 58, 34, 101, 121, 74, 106, 99, 110, 108, 119, 100, 70, 57, 104, 98, 71, 100,
      118, 99, 109, 108, 48, 97, 71, 48, 105, 79, 105, 74, 79, 84, 49, 57, 68, 85, 108, 108, 81, 86, 67, 73, 115, 73,
      110, 78, 111, 89, 88, 74, 108, 88, 51, 66, 104, 89, 50, 116, 108, 100, 67, 73, 54, 73, 109, 86, 53, 83, 106, 66,
      105, 77, 49, 74, 111, 89, 107, 78, 74, 78, 107, 49, 68, 100, 50, 108, 107, 82, 50, 104, 53, 87, 108, 104, 79, 98,
      50, 73, 121, 101, 71, 116, 74, 97, 109, 57, 51, 84, 69, 78, 75, 97, 109, 73, 121, 78, 84, 66, 97, 86, 122, 85,
      119, 83, 87, 112, 118, 97, 86, 90, 116, 99, 69, 90, 82, 86, 85, 90, 67, 85, 86, 86, 71, 81, 108, 70, 86, 82, 107,
      74, 82, 86, 85, 90, 67, 85, 86, 86, 71, 81, 108, 70, 86, 82, 107, 74, 83, 97, 50, 119, 48, 86, 109, 120, 83, 99,
      49, 100, 88, 85, 108, 104, 88, 98, 107, 53, 80, 84, 84, 74, 52, 86, 108, 100, 116, 100, 70, 78, 86, 77, 68, 85,
      50, 85, 87, 49, 115, 84, 50, 86, 115, 99, 70, 100, 90, 86, 108, 74, 104, 85, 106, 70, 115, 86, 86, 78, 115, 82,
      109, 70, 104, 77, 70, 86, 52, 86, 88, 112, 71, 100, 49, 74, 71, 85, 106, 90, 97, 82, 87, 82, 113, 84, 87, 49, 52,
      87, 86, 85, 121, 78, 87, 112, 78, 86, 88, 100, 53, 87, 88, 112, 114, 97, 87, 90, 82, 80, 84, 48, 105, 102, 81, 61,
      61, 34, 125,
    ]),
  );
  expect(aegis.payloads[1]).toEqual(
    new Uint8Array([
      123, 34, 112, 114, 111, 116, 111, 99, 111, 108, 95, 118, 101, 114, 115, 105, 111, 110, 34, 58, 34, 86, 49, 34, 44,
      34, 112, 97, 99, 107, 101, 116, 34, 58, 34, 101, 121, 74, 106, 99, 110, 108, 119, 100, 70, 57, 104, 98, 71, 100,
      118, 99, 109, 108, 48, 97, 71, 48, 105, 79, 105, 74, 79, 84, 49, 57, 68, 85, 108, 108, 81, 86, 67, 73, 115, 73,
      110, 78, 111, 89, 88, 74, 108, 88, 51, 66, 104, 89, 50, 116, 108, 100, 67, 73, 54, 73, 109, 86, 53, 83, 106, 66,
      105, 77, 49, 74, 111, 89, 107, 78, 74, 78, 107, 49, 68, 100, 50, 108, 107, 82, 50, 104, 53, 87, 108, 104, 79, 98,
      50, 73, 121, 101, 71, 116, 74, 97, 109, 57, 51, 84, 69, 78, 75, 97, 109, 73, 121, 78, 84, 66, 97, 86, 122, 85,
      119, 83, 87, 112, 118, 97, 86, 90, 116, 99, 69, 90, 82, 86, 85, 90, 67, 85, 86, 86, 71, 81, 108, 70, 86, 82, 107,
      74, 82, 86, 85, 90, 67, 85, 86, 86, 71, 81, 108, 70, 86, 82, 107, 74, 83, 97, 50, 119, 48, 86, 109, 120, 83, 99,
      49, 100, 88, 85, 108, 104, 88, 98, 107, 53, 80, 84, 84, 74, 52, 86, 108, 100, 116, 100, 70, 78, 86, 77, 68, 85,
      50, 85, 87, 49, 115, 84, 50, 86, 115, 99, 70, 100, 90, 86, 108, 74, 104, 85, 106, 70, 115, 86, 86, 78, 115, 82,
      109, 70, 104, 77, 70, 86, 52, 86, 88, 112, 71, 100, 49, 74, 71, 85, 106, 90, 97, 82, 87, 82, 113, 84, 87, 49, 52,
      87, 86, 85, 121, 78, 87, 112, 78, 86, 88, 100, 53, 87, 88, 112, 114, 97, 87, 90, 82, 80, 84, 48, 105, 102, 81, 61,
      61, 34, 125,
    ]),
  );
  expect(aegis.payloads[2]).toEqual(
    new Uint8Array([
      123, 34, 112, 114, 111, 116, 111, 99, 111, 108, 95, 118, 101, 114, 115, 105, 111, 110, 34, 58, 34, 86, 49, 34, 44,
      34, 112, 97, 99, 107, 101, 116, 34, 58, 34, 101, 121, 74, 106, 99, 110, 108, 119, 100, 70, 57, 104, 98, 71, 100,
      118, 99, 109, 108, 48, 97, 71, 48, 105, 79, 105, 74, 79, 84, 49, 57, 68, 85, 108, 108, 81, 86, 67, 73, 115, 73,
      110, 78, 111, 89, 88, 74, 108, 88, 51, 66, 104, 89, 50, 116, 108, 100, 67, 73, 54, 73, 109, 86, 53, 83, 106, 66,
      105, 77, 49, 74, 111, 89, 107, 78, 74, 78, 107, 49, 68, 100, 50, 108, 107, 82, 50, 104, 53, 87, 108, 104, 79, 98,
      50, 73, 121, 101, 71, 116, 74, 97, 109, 57, 51, 84, 69, 78, 75, 97, 109, 73, 121, 78, 84, 66, 97, 86, 122, 85,
      119, 83, 87, 112, 118, 97, 86, 90, 116, 99, 69, 90, 82, 86, 85, 90, 67, 85, 86, 86, 71, 81, 108, 70, 86, 82, 107,
      74, 82, 86, 85, 90, 67, 85, 86, 86, 71, 81, 108, 70, 86, 82, 107, 74, 83, 97, 50, 119, 48, 86, 109, 120, 83, 99,
      49, 100, 88, 85, 108, 104, 88, 98, 107, 53, 80, 84, 84, 74, 52, 86, 108, 100, 116, 100, 70, 78, 86, 77, 68, 85,
      50, 85, 87, 49, 115, 84, 50, 86, 115, 99, 70, 100, 90, 86, 108, 74, 104, 85, 106, 70, 115, 86, 86, 78, 115, 82,
      109, 70, 104, 77, 70, 86, 52, 86, 88, 112, 71, 100, 49, 74, 71, 85, 106, 90, 97, 82, 87, 82, 113, 84, 87, 49, 52,
      87, 86, 85, 121, 78, 87, 112, 78, 86, 88, 100, 53, 87, 88, 112, 114, 97, 87, 90, 82, 80, 84, 48, 105, 102, 81, 61,
      61, 34, 125,
    ]),
  );

  const res = aegis.combineShares(aegis.payloads, key);
  expect(res).toEqual(data);
});
